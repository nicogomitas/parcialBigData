{"filter":false,"title":"taxis.py","tooltip":"/taxis.py","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":32,"column":53},"action":"insert","lines":["from pyspark.sql import SparkSession","","# Crear o obtener la sesi√≥n de Spark","spark = SparkSession.builder \\","    .appName(\"MiAplicacionSpark\") \\","    .getOrCreate()","","# Ahora puedes usar 'spark' para ejecutar operaciones de Spark","#spark","df_zones = spark.read.csv(\"s3://jupyterbucket666/zones/\",header=True,inferSchema=True) ","df_taxis = spark.read.parquet(\"s3://jupyterbucket666/taxis/\")","from pyspark.sql import functions as F","","# Convertir las columnas de tiempo a tipo Timestamp en el DataFrame original","df_taxis = df_taxis.withColumn(\"tpep_pickup_datetime\", F.to_timestamp(\"tpep_pickup_datetime\"))","df_taxis = df_taxis.withColumn(\"tpep_dropoff_datetime\", F.to_timestamp(\"tpep_dropoff_datetime\"))","","# Calcular el tiempo de viaje en minutos y crear un nuevo DataFrame","df_trips = df_taxis \\","    .withColumn(\"travel_time_minutes\", ","                (F.col(\"tpep_dropoff_datetime\").cast(\"long\") - F.col(\"tpep_pickup_datetime\").cast(\"long\")) / 60) \\","    .join(df_zones.alias(\"pu_zones\"), ","          df_taxis.PULocationID == F.col(\"pu_zones.LocationID\")) \\","    .join(df_zones.alias(\"do_zones\"), ","          df_taxis.DOLocationID == F.col(\"do_zones.LocationID\")) \\","    .select(","        F.col(\"pu_zones.Zone\").alias(\"nombre_zona_origen\"),","        F.col(\"do_zones.Zone\").alias(\"nombre_zona_destino\"),","        \"travel_time_minutes\"","    )","","#Guardar df_trips en una carpeta de s3","df_trips.write.parquet(\"s3://jupyterbucket666/trips\")"],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":32,"column":53},"end":{"row":32,"column":53},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1731598170697,"hash":"3fa7219e2f466d8f8a0b447166b7ad9792c36cfd"}